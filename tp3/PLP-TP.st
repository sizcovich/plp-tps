Object subclass: #Arma	instanceVariableNames: 'nombre ataques potencia velocidad'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!Arma methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:14'!nombre: unNombre ataques: unosAtaques potencia: unaPotencia velocidad: unaVelocidadnombre := unNombre.ataques := unosAtaques.potencia := unaPotencia.velocidad := unaVelocidad. ! !!Arma methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:14'!potencia	^ potencia! !!Arma methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:15'!velocidad	^ velocidad! !!Arma methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:15'!ataques	^ ataques! !!Arma methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:14'!nombre	^ nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Arma class	instanceVariableNames: ''!!Arma class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:22'!martillo: unaPotencia velocidad: unaVelocidad^self nombre: 'martillo' ataques: (Dictionary new at: TipoDeAtaque impacto put: 2/3; at: TipoDeAtaque abrasion put: 1/3; yourself) potencia: unaPotencia velocidad: unaVelocidad.! !!Arma class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:23'!sierra: unaPotencia velocidad: unaVelocidad^self nombre: 'sierra' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/3; at: TipoDeAtaque abrasion put: 2/3; yourself) potencia: unaPotencia velocidad: unaVelocidad.! !!Arma class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:22'!lanzallamas: unaPotencia velocidad: unaVelocidad^self nombre: 'lanzallamas' ataques: (Dictionary new at: TipoDeAtaque fuego put: 1; yourself) potencia: unaPotencia velocidad: unaVelocidad.! !!Arma class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:13'!nombre: unNombre ataques: unosAtaques potencia: unaPotencia velocidad: unaVelocidad^self new nombre: unNombre ataques: unosAtaques potencia: unaPotencia velocidad: unaVelocidad ! !Object subclass: #Armazon	instanceVariableNames: 'nombre vulnerabilidades dureza'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!Armazon methodsFor: 'accessing' stamp: 'SI 11/2/2016 15:21'!nombre	^ nombre! !!Armazon methodsFor: 'accessing' stamp: 'SI 11/2/2016 15:21'!vulnerabilidades	^ vulnerabilidades! !!Armazon methodsFor: 'accessing' stamp: 'SI 11/2/2016 16:23'!vulnerabilidadA: unTipoDeAtaque^vulnerabilidades at:unTipoDeAtaque ifAbsent:1.! !!Armazon methodsFor: 'accessing' stamp: 'SI 11/2/2016 15:21'!dureza	^ dureza! !!Armazon methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 16:45'!nombre: unString vulnerabilidades: unDic dureza: unaDurezanombre := unString.vulnerabilidades := unDic.dureza := unaDureza ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Armazon class	instanceVariableNames: ''!!Armazon class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 15:18'!nombre: unString1 vulnerabilidades: unString2 dureza: unString3^self new nombre: unString1 vulnerabilidades: unString2 dureza: unString3 ! !!Armazon class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 15:58'!acrilico: unaDureza|vul|vul := Dictionary new at: TipoDeAtaque fuego put: 1; at: TipoDeAtaque impacto put: 1/2; at: TipoDeAtaque abrasion put: 2; yourself.^self nombre: 'acrilico' vulnerabilidades: vul dureza: unaDureza! !!Armazon class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 15:58'!metal: unaDureza|vul|vul := Dictionary new at: TipoDeAtaque fuego put: 1/4; at: TipoDeAtaque impacto put: 1/2; at: TipoDeAtaque abrasion put: 1; yourself.^self nombre: 'metal' vulnerabilidades: vul dureza: unaDureza! !!Armazon class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 15:57'!madera: unaDureza|vul|vul := Dictionary new at: TipoDeAtaque fuego put: 2; at: TipoDeAtaque impacto put: 1; at: TipoDeAtaque abrasion put: 1/2; yourself.^self nombre: 'madera' vulnerabilidades: vul dureza: unaDureza! !Object subclass: #Robot	instanceVariableNames: 'nombre armazon arma danio'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!Robot methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:26'!danio	^ danio! !!Robot methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:26'!armazon	^ armazon! !!Robot methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:25'!arma	^ arma! !!Robot methodsFor: 'accessing' stamp: 'SI 11/2/2016 17:26'!nombre	^ nombre! !!Robot methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:34'!nombre: unNombre armazon: unArmazon arma: unArma danio: unDanionombre := unNombre.armazon := unArmazon.arma := unArma.danio := unDanio.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Robot class	instanceVariableNames: ''!!Robot class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:35'!dragon^self new nombre: 'dragon' armazon: (Armazon acrilico: 20) arma: (Arma lanzallamas: 60 velocidad: 15) danio: 0.! !!Robot class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:35'!cortados^self new nombre: 'cortados' armazon: (Armazon metal: 50) arma: (Arma sierra: 45 velocidad: 10) danio: 0.! !!Robot class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:35'!tronquito^self new nombre: 'tronquito' armazon: (Armazon madera: 10) arma: (Arma martillo: 40 velocidad: 2) danio: 0.! !TestCase subclass: #RobotTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!RobotTest commentStamp: '<historical>' prior: 0!A RobotTest is a test class for testing the behavior of Robot!!RobotTest methodsFor: 'tests instance creation' stamp: 'PLP 10/27/2016 10:14'!newRobot	^Robot new! !!RobotTest methodsFor: 'tests instance creation' stamp: 'PLP 10/27/2016 10:17'!arma: ataques pot: potencia vel: velocidad	^Arma new ataques: ataques ; potencia: potencia ; velocidad: velocidad ; nombre: 'desconocido'! !!RobotTest methodsFor: 'tests instance creation' stamp: 'PLP 10/27/2016 10:20'!armazon: vulnerabilidades dur: dureza	^Armazon new vulnerabilidades: vulnerabilidades ; dureza: dureza ; nombre: 'desconocido'! !RobotTest subclass: #TestsEj1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!TestsEj1 methodsFor: 'testing' stamp: 'PLP 10/27/2016 10:53'!test01Igualdad	self assert: TipoDeAtaque fuego equals: TipoDeAtaque fuego.	self assert: TipoDeAtaque impacto equals: TipoDeAtaque impacto.	self assert: TipoDeAtaque abrasion equals: TipoDeAtaque abrasion.	self assert: TipoDeAtaque fuego ~= TipoDeAtaque impacto.	self assert: TipoDeAtaque impacto ~= TipoDeAtaque abrasion.	self assert: TipoDeAtaque abrasion ~= TipoDeAtaque fuego.! !!TestsEj1 methodsFor: 'testing' stamp: 'PLP 10/27/2016 10:56'!test02Hash	self assert: TipoDeAtaque fuego hash equals: TipoDeAtaque fuego hash.	self assert: TipoDeAtaque impacto hash equals: TipoDeAtaque impacto hash.	self assert: TipoDeAtaque abrasion hash equals: TipoDeAtaque abrasion hash.	self assert: TipoDeAtaque fuego hash ~= TipoDeAtaque abrasion hash.	self assert: TipoDeAtaque impacto hash ~= TipoDeAtaque fuego hash.	self assert: TipoDeAtaque abrasion hash ~= TipoDeAtaque impacto hash.! !RobotTest subclass: #TestsEj2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!TestsEj2 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:24'!test02Dureza| acrilico madera metal cuero oro cotaDeMalla vulCuero vulCotaDeMalla vulOro|acrilico := Armazon acrilico: 20.madera := Armazon madera: 10.metal := Armazon metal: 50.vulCuero := Dictionary new at: TipoDeAtaque fuego put: 2; at: TipoDeAtaque impacto put: 2; at: TipoDeAtaque abrasion put: 2; yourself. vulCotaDeMalla  := Dictionary new at: TipoDeAtaque fuego put: 1/6; at: TipoDeAtaque impacto put: 1/4; at: TipoDeAtaque abrasion put: 1; yourself.vulOro := Dictionary new at: TipoDeAtaque fuego put: 1/10; at: TipoDeAtaque impacto put: 1/8; at: TipoDeAtaque abrasion put: 1; yourself. cuero := Armazon nombre: 'cuero' vulnerabilidades: vulCuero dureza: 5. cotaDeMalla := Armazon nombre: 'cotaDeMalla' vulnerabilidades: vulCotaDeMalla dureza: 100. oro := Armazon nombre: 'oro' vulnerabilidades: vulOro dureza: 40. self assert: acrilico dureza equals: 20.self assert: madera dureza equals: 10.self assert: metal dureza equals: 50.self assert: cuero dureza equals: 5.self assert: cotaDeMalla dureza equals: 100.self assert: oro dureza equals: 40.! !!TestsEj2 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:24'!test01Nombre| acrilico madera metal cuero oro cotaDeMalla vulCuero vulCotaDeMalla vulOro|acrilico := Armazon acrilico: 20.madera := Armazon madera: 10.metal := Armazon metal: 50.vulCuero := Dictionary new at: TipoDeAtaque fuego put: 2; at: TipoDeAtaque impacto put: 2; at: TipoDeAtaque abrasion put: 2; yourself. vulCotaDeMalla  := Dictionary new at: TipoDeAtaque fuego put: 1/6; at: TipoDeAtaque impacto put: 1/4; at: TipoDeAtaque abrasion put: 1; yourself.vulOro := Dictionary new at: TipoDeAtaque fuego put: 1/10; at: TipoDeAtaque impacto put: 1/8; at: TipoDeAtaque abrasion put: 1; yourself. cuero := Armazon nombre: 'cuero' vulnerabilidades: vulCuero dureza: 5. cotaDeMalla := Armazon nombre: 'cotaDeMalla' vulnerabilidades: vulCotaDeMalla dureza: 100. oro := Armazon nombre: 'oro' vulnerabilidades: vulOro dureza: 40. self assert: acrilico nombre equals: 'acrilico'.self assert: madera nombre equals: 'madera'.self assert: metal nombre equals: 'metal'.self assert: cuero nombre equals: 'cuero'.self assert: cotaDeMalla nombre equals: 'cotaDeMalla'.self assert: oro nombre equals: 'oro'.! !!TestsEj2 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:23'!test03Vulnerabilidad| acrilico madera metal cuero oro cotaDeMalla vulCuero vulCotaDeMalla vulOro|acrilico := Armazon acrilico: 20.madera := Armazon madera: 10.metal := Armazon metal: 50.vulCuero := Dictionary new at: TipoDeAtaque fuego put: 2; at: TipoDeAtaque impacto put: 2; at: TipoDeAtaque abrasion put: 2; yourself. vulCotaDeMalla  := Dictionary new at: TipoDeAtaque fuego put: 1/6; at: TipoDeAtaque impacto put: 1/4; at: TipoDeAtaque abrasion put: 1; yourself.vulOro := Dictionary new at: TipoDeAtaque fuego put: 1/10; at: TipoDeAtaque impacto put: 1/8; at: TipoDeAtaque abrasion put: 1; yourself. cuero := Armazon nombre: 'cuero' vulnerabilidades: vulCuero dureza: 5. cotaDeMalla := Armazon nombre: 'cotaDeMalla' vulnerabilidades: vulCotaDeMalla dureza: 100. oro := Armazon nombre: 'oro' vulnerabilidades: vulOro dureza: 40. self assert: (acrilico vulnerabilidadA: TipoDeAtaque fuego) equals: 1.self assert: (acrilico vulnerabilidadA: TipoDeAtaque impacto) equals: 1/2.self assert: (acrilico vulnerabilidadA: TipoDeAtaque abrasion) equals: 2.self assert: (madera vulnerabilidadA: TipoDeAtaque fuego) equals: 2.self assert: (madera vulnerabilidadA: TipoDeAtaque impacto) equals: 1.self assert: (madera vulnerabilidadA: TipoDeAtaque abrasion) equals: 1/2.self assert: (metal vulnerabilidadA: TipoDeAtaque fuego) equals: 1/4.self assert: (metal vulnerabilidadA: TipoDeAtaque impacto) equals: 1/2.self assert: (metal vulnerabilidadA: TipoDeAtaque abrasion) equals: 1.self assert: (cuero vulnerabilidadA: TipoDeAtaque fuego) equals: 2.self assert: (cuero vulnerabilidadA: TipoDeAtaque impacto) equals: 2.self assert: (cuero vulnerabilidadA: TipoDeAtaque abrasion) equals: 2.self assert: (cotaDeMalla vulnerabilidadA: TipoDeAtaque fuego) equals: 1/6.self assert: (cotaDeMalla vulnerabilidadA: TipoDeAtaque impacto) equals: 1/4.self assert: (cotaDeMalla vulnerabilidadA: TipoDeAtaque abrasion) equals: 1.self assert: (oro vulnerabilidadA: TipoDeAtaque fuego) equals: 1/10.self assert: (oro vulnerabilidadA: TipoDeAtaque impacto) equals: 1/8.self assert: (oro vulnerabilidadA: TipoDeAtaque abrasion) equals: 1.self assert: cuero vulnerabilidades equals: vulCuero.self assert: cotaDeMalla vulnerabilidades equals: vulCotaDeMalla .self assert: oro vulnerabilidades equals: vulOro.! !RobotTest subclass: #TestsEj3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!TestsEj3 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:26'!test01Nombre|lanzallamas martillo sierra arco espada daga |lanzallamas := Arma lanzallamas: 100 velocidad: 25.martillo := Arma martillo: 15 velocidad: 1.sierra := Arma sierra: 45 velocidad: 10.arco := Arma nombre: 'arco' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/5; at: TipoDeAtaque abrasion put: 1/4; yourself ) potencia: 20 velocidad: 15. daga := Arma nombre: 'daga' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/4; at: TipoDeAtaque abrasion put: 1/2; yourself ) potencia: 30 velocidad: 10. espada := Arma nombre: 'espada' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/3; at: TipoDeAtaque abrasion put: 2/3; yourself ) potencia: 40 velocidad: 10. self assert: lanzallamas  nombre equals: 'lanzallamas'.self assert: martillo nombre equals: 'martillo'.self assert: sierra nombre equals: 'sierra'.self assert: arco  nombre equals: 'arco'.self assert: daga nombre equals: 'daga'.self assert: espada nombre equals: 'espada'.! !!TestsEj3 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:25'!test02Potencia|lanzallamas martillo sierra arco espada daga |lanzallamas := Arma lanzallamas: 100 velocidad: 25.martillo := Arma martillo: 15 velocidad: 1.sierra := Arma sierra: 45 velocidad: 10.arco := Arma nombre: 'arco' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/5; at: TipoDeAtaque abrasion put: 1/4; yourself ) potencia: 20 velocidad: 15. daga := Arma nombre: 'daga' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/4; at: TipoDeAtaque abrasion put: 1/2; yourself ) potencia: 30 velocidad: 10. espada := Arma nombre: 'espada' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/3; at: TipoDeAtaque abrasion put: 2/3; yourself ) potencia: 40 velocidad: 10. self assert: lanzallamas potencia equals: 100.self assert: martillo potencia equals: 15.self assert: sierra potencia equals: 45.self assert: arco potencia equals: 20.self assert: daga potencia equals: 30.self assert: espada potencia equals: 40.! !!TestsEj3 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:25'!test03Velocidad|lanzallamas martillo sierra arco espada daga |lanzallamas := Arma lanzallamas: 100 velocidad: 25.martillo := Arma martillo: 15 velocidad: 1.sierra := Arma sierra: 45 velocidad: 10.arco := Arma nombre: 'arco' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/5; at: TipoDeAtaque abrasion put: 1/4; yourself ) potencia: 20 velocidad: 15. daga := Arma nombre: 'daga' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/4; at: TipoDeAtaque abrasion put: 1/2; yourself ) potencia: 30 velocidad: 10. espada := Arma nombre: 'espada' ataques: (Dictionary new at: TipoDeAtaque impacto put: 1/3; at: TipoDeAtaque abrasion put: 2/3; yourself ) potencia: 40 velocidad: 10. self assert: lanzallamas velocidad equals: 25.self assert: martillo velocidad equals: 1.self assert: sierra velocidad equals: 10.self assert: arco velocidad equals: 15.self assert: daga velocidad equals: 10.self assert: espada velocidad equals: 10.! !RobotTest subclass: #TestsEj4	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!TestsEj4 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:26'!test04Danio| t d c |t := Robot tronquito.d := Robot dragon.c := Robot cortados.self assert: t danio equals: 0.self assert: d danio equals: 0.self assert: c danio equals: 0.! !!TestsEj4 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:27'!test03Armazon| t d c |t := Robot tronquito.d := Robot dragon.c := Robot cortados.self assert: t armazon dureza equals: 10.self assert: d armazon dureza equals: 20.self assert: c armazon dureza equals: 50.self assert: t armazon nombre equals: 'madera'.self assert: d armazon nombre equals: 'acrilico'.self assert: c armazon nombre equals: 'metal'.! !!TestsEj4 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:28'!test02Arma| t d c |t := Robot tronquito.d := Robot dragon.c := Robot cortados.self assert: t arma nombre equals: 'martillo'.self assert: d arma nombre equals: 'lanzallamas'.self assert: c arma nombre equals: 'sierra'.self assert: t arma potencia equals: 40.self assert: d arma potencia equals: 60.self assert: c arma potencia equals: 45.self assert: t arma velocidad equals: 2.self assert: d arma velocidad equals: 15.self assert: c arma velocidad equals: 10.! !!TestsEj4 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:27'!test01Nombre| t d c |t := Robot tronquito.d := Robot dragon.c := Robot cortados.self assert: t nombre equals: 'tronquito'.self assert: d nombre equals: 'dragon'.self assert: c nombre equals: 'cortados'.! !RobotTest subclass: #TestsEj5	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!TestsEj5 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:03'!test02AtaqueYDefensa    | a d |    "ataca con una potencia de 2"    a := self newRobot arma: (self arma: (Dictionary with: TipoDeAtaque impacto -> 1) pot: 2 vel: 1).    "tengo defensa de impacto al 50%"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque impacto -> (1/2)) dur: 1).    a atacar: d.    self assert: d danio equals: 1.    "tengo defensa de impacto al 50% y dureza 2"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque impacto -> (1/2) ) dur: 2).    a atacar: d.    self assert: d danio equals: 1/2.    "tengo defensa de impacto al 100%"       d :=  self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque impacto -> 0) dur: 1).    a atacar: d.    self assert: d danio equals: 0.! !!TestsEj5 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:07'!test03AtaqueYDefensa    | a d |    "ataca con una potencia de 2"    a := self newRobot arma: (self arma: (Dictionary with: TipoDeAtaque impacto -> 1 ) pot: 2 vel: 1).    "tengo defensa de impacto al 33% y dureza 1/2"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque impacto -> (1/3)) dur: 1/2).    a atacar: d.    self assert: d danio equals: 4/3. "tengo mas daño que en 002"    "tengo defensa de impacto al 33% y dureza 1"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque impacto -> (1/3)) dur: 1).    a atacar: d.    self assert: d danio equals: 2/3.    "tengo defensa de impacto al 100%"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque impacto -> 0) dur: 1/2).    a atacar: d.    self assert: d danio equals: 0.! !!TestsEj5 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:12'!test05MalaDefensa    | a d |    "ataca con una potencia de 2"    a := self newRobot arma: (self arma: (Dictionary with: TipoDeAtaque impacto -> 1) pot: 2 vel: 1).    "defensa total pero equivocada"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque fuego -> 0) dur: 1).    a atacar: d.    self assert: d danio equals: 2.    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque fuego -> 1) dur: 2).    a atacar: d.    self assert: d danio equals: 1.       d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque fuego -> (1/2)) dur: 1).    a atacar: d.    self assert: d danio equals: 2.! !!TestsEj5 methodsFor: 'testing' stamp: 'PLP 10/27/2016 10:34'!test01Ataque	| t d a |	t := Robot tronquito.	d := Robot dragon.		t atacar: d.		self assert: d danio equals: 4.	    "ataca con una potencia de 2"    a := self newRobot arma: (self arma: (Dictionary with: ( TipoDeAtaque impacto -> 1 )) pot: 2 vel: 1).    "sin armazon"    d := self newRobot armazon: (self armazon: Dictionary new dur: 1).    a atacar: d.    self assert: a danio equals: 0    .    self assert: d danio equals: 2.    "armazon media"    d := self newRobot armazon: (self armazon: Dictionary new dur: 1/2).    a atacar: d.    self assert: a danio equals: 0.    self assert: d danio equals: 4.       "armazon inexpugnable"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque fuego -> 0 with: TipoDeAtaque impacto -> 0 with: TipoDeAtaque abrasion -> 0) dur: 1).    a atacar: d.    self assert: a danio equals: 0.    self assert: d danio equals: 0.! !!TestsEj5 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:32'!test06BatallaContra| t d c |t := Robot tronquito.d := Robot dragon.c := Robot cortados.self assert: (t batallaContra: d) nombre equals: 'dragon'.self assert: t danio equals: 180.self assert: d danio equals: 4.self assert: (t batallaContra: d) nombre equals: 'dragon'.self assert: t danio equals: 180.self assert: d danio equals: 4.self assert: (c batallaContra: d) nombre equals: 'cortados'.self assert: d danio equals: 421/4.self assert: c danio equals: 9.self assert: (d batallaContra: c) nombre equals: 'cortados'.self assert: d danio equals: 421/4.self assert: c danio equals: 9.self assert: (Robot dragon batallaContra: c) nombre equals: 'cortados'.self assert: d danio equals: 421/4.self assert: c danio equals: 45/2.! !!TestsEj5 methodsFor: 'testing' stamp: 'PLP 10/27/2016 11:09'!test04AtaqueYDefensa    | a d |    "ataca con una potencia de 2"    a := self newRobot arma: (self arma: (Dictionary with: TipoDeAtaque impacto -> 1) pot: 2 vel: 1).    "tengo defensa de impacto al 100%"    d := self newRobot armazon: (self armazon: (Dictionary with: TipoDeAtaque impacto -> 0) dur: 9).    a atacar: d.    self assert: d danio equals: 0.    "tengo defensa de impacto normal"    d := self newRobot armazon: (self armazon: (Dictionary new) dur: 1).    a atacar: d.    self assert: d danio equals: 2.! !Object subclass: #TipoDeAtaque	instanceVariableNames: 'tipo'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP'!!TipoDeAtaque methodsFor: 'accessing' stamp: 'SI 11/1/2016 21:39'!tipo: aStringtipo := aString.! !!TipoDeAtaque methodsFor: 'accessing' stamp: 'SI 11/1/2016 21:34'!tipo	^ tipo! !!TipoDeAtaque methodsFor: 'as yet unclassified' stamp: 'SI 11/1/2016 21:35'!= unAtaque^self tipo = unAtaque tipo.! !!TipoDeAtaque methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 16:27'!hash^super hash! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TipoDeAtaque class	instanceVariableNames: ''!!TipoDeAtaque class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:09'!impactoself new: 'impacto'.^'impacto'! !!TipoDeAtaque class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:08'!abrasionself new: 'abrasion'.^'abrasion'! !!TipoDeAtaque class methodsFor: 'as yet unclassified' stamp: 'SI 11/1/2016 21:32'!new: aString^self new tipo: aString;yourself.! !!TipoDeAtaque class methodsFor: 'as yet unclassified' stamp: 'SI 11/2/2016 17:08'!fuegoself new: 'fuego'.^'fuego'! !